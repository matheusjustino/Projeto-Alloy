MODULE main
    VAR
        cartao: {True, False};
        aplic: process app(cartao);
        dispositivo: process disp(aplic, cartao);
    ASSIGN
        init(cartao) := {False};
        
        
    
    LTLSPEC G(cartao = False & aplic.pago = False) -> F dispositivo.appInstalado = True;
    LTLSPEC G(cartao = True) -> X dispositivo.appInstalado = True;
    LTLSPEC G(cartao = False & aplic.pago = True) -> X (dispositivo.appInstalado = False);
    SPEC AG(cartao = False & aplic.pago = True) -> AX (dispositivo.appInstalado = False);
    



MODULE app(cartao)
    VAR
        atualizado: {True, False};
        pago: {True, False};
    ASSIGN
        init(atualizado) := {True};
        init(pago) := {False};
        
        next(pago) :=
            case
                (cartao = True): {True};
                (cartao = False): {False};
                (pago = True & cartao = False): {False};
                (pago = False & cartao = True): {True, False};
                TRUE: {False};
            esac;

        next(atualizado) :=
            case
                (atualizado = False): {True};
                (atualizado = True): {False};
                TRUE: {True};
            esac;
    FAIRNESS
        running


MODULE disp(aplic, cartao)
    VAR
        appInstalado: {True, False};
        remover: boolean;
        atualizar: boolean;
    ASSIGN
        init(appInstalado) := {False};
        init(remover) := FALSE;
        init(atualizar) := TRUE;

        next(appInstalado) :=
            case
                (cartao = False & aplic.pago = True): {False};
                (appInstalado = False & (cartao = True)): {True};
                (appInstalado = False & (cartao = False & aplic.pago = False)): {True};
                (appInstalado = False & (cartao = False & aplic.pago = True)): {False};
                TRUE: {False};
            esac;
        next(remover) :=
            case
                (appInstalado = False): FALSE;
                (appInstalado = True): TRUE;
                TRUE: FALSE;
            esac;
        next(atualizar) :=
            case
                (aplic.atualizado = False): TRUE;
                (aplic.atualizado = True): FALSE;
                TRUE: TRUE;
            esac;
    
    FAIRNESS
        running
